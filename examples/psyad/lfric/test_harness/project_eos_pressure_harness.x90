module adjoint_test_mod
  implicit none
  public

  contains
  subroutine adjoint_test(mesh, chi, panel_id)
    use field_mod, only : field_type
    use function_space_mod, only : function_space_type
    use mesh_mod, only : mesh_type
    use function_space_collection_mod, only : function_space_collection
    use tl_project_eos_pressure_kernel_mod, only : tl_project_eos_pressure_kernel_type
    use adj_project_eos_pressure_kernel_mod, only : adj_project_eos_pressure_kernel_type
    use constants_mod, only : i_def, r_def
    use fs_continuity_mod, only : w0, w3, wtheta
    use operator_mod, only : operator_type
    use quadrature_xyoz_mod, only : quadrature_xyoz_type
    use quadrature_rule_gaussian_mod, only : quadrature_rule_gaussian_type
    integer(kind=i_def), parameter :: element_order = 1_i_def
    real(kind=r_def), parameter :: overall_tolerance = 1500.0_r_def
    type(mesh_type), pointer, intent(in) :: mesh
    type(field_type), dimension(3), intent(in), optional :: chi
    type(field_type), intent(in), optional :: panel_id
    TYPE(function_space_type), POINTER :: vector_space_wtheta_ptr
    TYPE(function_space_type), POINTER :: vector_space_w3_ptr
    TYPE(function_space_type), POINTER :: vector_space_w0_ptr
    type(field_type) :: field_1
    type(field_type) :: field_2
    type(field_type) :: field_3
    type(field_type) :: field_4
    type(field_type) :: field_5
    type(field_type) :: field_6
    type(field_type) :: field_7
    type(field_type), dimension(3) :: field_8
    type(field_type) :: field_9
    type(operator_type) :: op_10
    type(quadrature_xyoz_type) :: qr_xyoz
    type(quadrature_rule_gaussian_type) :: quadrature_rule
    type(field_type) :: field_1_input
    type(field_type) :: field_2_input
    type(field_type) :: field_3_input
    type(field_type) :: field_4_input
    type(field_type) :: field_5_input
    type(field_type) :: field_6_input
    type(field_type) :: field_7_input
    type(field_type), dimension(3) :: field_8_input
    type(field_type) :: field_9_input
    real(kind=r_def) :: field_1_inner_prod
    real(kind=r_def) :: field_2_inner_prod
    real(kind=r_def) :: field_3_inner_prod
    real(kind=r_def) :: field_4_inner_prod
    real(kind=r_def) :: field_5_inner_prod
    real(kind=r_def) :: field_6_inner_prod
    real(kind=r_def) :: field_7_inner_prod
    real(kind=r_def), dimension(3) :: field_8_inner_prod
    real(kind=r_def) :: field_9_inner_prod
    real(kind=r_def) :: inner1
    real(kind=r_def) :: field_1_field_1_input_inner_prod
    real(kind=r_def) :: field_2_field_2_input_inner_prod
    real(kind=r_def) :: field_3_field_3_input_inner_prod
    real(kind=r_def) :: field_4_field_4_input_inner_prod
    real(kind=r_def) :: field_5_field_5_input_inner_prod
    real(kind=r_def) :: field_6_field_6_input_inner_prod
    real(kind=r_def) :: field_7_field_7_input_inner_prod
    real(kind=r_def), dimension(3) :: field_8_field_8_input_inner_prod
    real(kind=r_def) :: field_9_field_9_input_inner_prod
    real(kind=r_def) :: inner2
    real(kind=r_def) :: MachineTol
    real(kind=r_def) :: relative_diff

    vector_space_wtheta_ptr => function_space_collection % get_fs(mesh, element_order, wtheta)
    vector_space_w3_ptr => function_space_collection % get_fs(mesh, element_order, w3)
    vector_space_w0_ptr => function_space_collection % get_fs(mesh, element_order, w0)
    call field_1 % initialise(vector_space=vector_space_w3_ptr, name='field_1')
    call field_2 % initialise(vector_space=vector_space_w3_ptr, name='field_2')
    call field_3 % initialise(vector_space=vector_space_wtheta_ptr, name='field_3')
    call field_4 % initialise(vector_space=vector_space_wtheta_ptr, name='field_4')
    call field_5 % initialise(vector_space=vector_space_w3_ptr, name='field_5')
    call field_6 % initialise(vector_space=vector_space_wtheta_ptr, name='field_6')
    call field_7 % initialise(vector_space=vector_space_wtheta_ptr, name='field_7')
    call field_8(1_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8')
    call field_8(2_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8')
    call field_8(3_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8')
    call field_9 % initialise(vector_space=vector_space_w3_ptr, name='field_9')
    call op_10 % initialise(vector_space_w3_ptr, vector_space_w3_ptr)
    qr_xyoz = quadrature_xyoz_type(element_order + 3,quadrature_rule)
    call field_1_input % initialise(vector_space=vector_space_w3_ptr, name='field_1_input')
    call field_2_input % initialise(vector_space=vector_space_w3_ptr, name='field_2_input')
    call field_3_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_3_input')
    call field_4_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_4_input')
    call field_5_input % initialise(vector_space=vector_space_w3_ptr, name='field_5_input')
    call field_6_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_6_input')
    call field_7_input % initialise(vector_space=vector_space_wtheta_ptr, name='field_7_input')
    call field_8_input(1_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8_input')
    call field_8_input(2_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8_input')
    call field_8_input(3_i_def) % initialise(vector_space=vector_space_w0_ptr, name='field_8_input')
    call field_9_input % initialise(vector_space=vector_space_w3_ptr, name='field_9_input')
    field_1_inner_prod = 0.0_r_def
    field_2_inner_prod = 0.0_r_def
    field_3_inner_prod = 0.0_r_def
    field_4_inner_prod = 0.0_r_def
    field_5_inner_prod = 0.0_r_def
    field_6_inner_prod = 0.0_r_def
    field_7_inner_prod = 0.0_r_def
    field_8_inner_prod(1_i_def) = 0.0_r_def
    field_8_inner_prod(2_i_def) = 0.0_r_def
    field_8_inner_prod(3_i_def) = 0.0_r_def
    field_9_inner_prod = 0.0_r_def
    ! Initialise arguments and call the tangent-linear kernel.
    call invoke(setval_random(field_1), setval_x(field_1_input, field_1), setval_random(field_2), setval_x(field_2_input, &
&field_2), setval_random(field_3), setval_x(field_3_input, field_3), setval_random(field_4), setval_x(field_4_input, field_4), &
&setval_random(field_5), setval_x(field_5_input, field_5), setval_random(field_6), setval_x(field_6_input, field_6), &
&setval_random(field_7), setval_x(field_7_input, field_7), setval_random(field_8(1_i_def)), setval_x(field_8_input(1_i_def), &
&field_8(1_i_def)), setval_random(field_8(2_i_def)), setval_x(field_8_input(2_i_def), field_8(2_i_def)), &
&setval_random(field_8(3_i_def)), setval_x(field_8_input(3_i_def), field_8(3_i_def)), setval_random(field_9), &
&setval_x(field_9_input, field_9), setval_random_operator(op_10), tl_project_eos_pressure_kernel_type(field_1, field_2, field_3, &
&field_4, field_5, field_6, field_7, field_8, field_9, op_10, qr_xyoz), x_innerproduct_x(field_1_inner_prod, field_1), &
&x_innerproduct_x(field_2_inner_prod, field_2), x_innerproduct_x(field_3_inner_prod, field_3), &
&x_innerproduct_x(field_4_inner_prod, field_4), x_innerproduct_x(field_5_inner_prod, field_5), &
&x_innerproduct_x(field_6_inner_prod, field_6), x_innerproduct_x(field_7_inner_prod, field_7), &
&x_innerproduct_x(field_8_inner_prod(1_i_def), field_8(1_i_def)), x_innerproduct_x(field_8_inner_prod(2_i_def), field_8(2_i_def)), &
&x_innerproduct_x(field_8_inner_prod(3_i_def), field_8(3_i_def)), x_innerproduct_x(field_9_inner_prod, field_9))
    inner1 = 0.0_r_def
    inner1 = inner1 + field_1_inner_prod
    inner1 = inner1 + field_2_inner_prod
    inner1 = inner1 + field_3_inner_prod
    inner1 = inner1 + field_4_inner_prod
    inner1 = inner1 + field_5_inner_prod
    inner1 = inner1 + field_6_inner_prod
    inner1 = inner1 + field_7_inner_prod
    inner1 = inner1 + field_8_inner_prod(1_i_def)
    inner1 = inner1 + field_8_inner_prod(2_i_def)
    inner1 = inner1 + field_8_inner_prod(3_i_def)
    inner1 = inner1 + field_9_inner_prod
    field_1_field_1_input_inner_prod = 0.0_r_def
    field_2_field_2_input_inner_prod = 0.0_r_def
    field_3_field_3_input_inner_prod = 0.0_r_def
    field_4_field_4_input_inner_prod = 0.0_r_def
    field_5_field_5_input_inner_prod = 0.0_r_def
    field_6_field_6_input_inner_prod = 0.0_r_def
    field_7_field_7_input_inner_prod = 0.0_r_def
    field_8_field_8_input_inner_prod(1_i_def) = 0.0_r_def
    field_8_field_8_input_inner_prod(2_i_def) = 0.0_r_def
    field_8_field_8_input_inner_prod(3_i_def) = 0.0_r_def
    field_9_field_9_input_inner_prod = 0.0_r_def
    call invoke(adj_project_eos_pressure_kernel_type(field_1, field_2, field_3, field_4, field_5, field_6, field_7, field_8, &
&field_9, op_10, qr_xyoz), x_innerproduct_y(field_1_field_1_input_inner_prod, field_1, field_1_input), &
&x_innerproduct_y(field_2_field_2_input_inner_prod, field_2, field_2_input), x_innerproduct_y(field_3_field_3_input_inner_prod, &
&field_3, field_3_input), x_innerproduct_y(field_4_field_4_input_inner_prod, field_4, field_4_input), &
&x_innerproduct_y(field_5_field_5_input_inner_prod, field_5, field_5_input), x_innerproduct_y(field_6_field_6_input_inner_prod, &
&field_6, field_6_input), x_innerproduct_y(field_7_field_7_input_inner_prod, field_7, field_7_input), &
&x_innerproduct_y(field_8_field_8_input_inner_prod(1_i_def), field_8(1_i_def), field_8_input(1_i_def)), &
&x_innerproduct_y(field_8_field_8_input_inner_prod(2_i_def), field_8(2_i_def), field_8_input(2_i_def)), &
&x_innerproduct_y(field_8_field_8_input_inner_prod(3_i_def), field_8(3_i_def), field_8_input(3_i_def)), &
&x_innerproduct_y(field_9_field_9_input_inner_prod, field_9, field_9_input))
    inner2 = 0.0_r_def
    inner2 = inner2 + field_1_field_1_input_inner_prod
    inner2 = inner2 + field_2_field_2_input_inner_prod
    inner2 = inner2 + field_3_field_3_input_inner_prod
    inner2 = inner2 + field_4_field_4_input_inner_prod
    inner2 = inner2 + field_5_field_5_input_inner_prod
    inner2 = inner2 + field_6_field_6_input_inner_prod
    inner2 = inner2 + field_7_field_7_input_inner_prod
    inner2 = inner2 + field_8_field_8_input_inner_prod(1_i_def)
    inner2 = inner2 + field_8_field_8_input_inner_prod(2_i_def)
    inner2 = inner2 + field_8_field_8_input_inner_prod(3_i_def)
    inner2 = inner2 + field_9_field_9_input_inner_prod
    ! Test the inner-product values for equality, allowing for the precision of the active variables
    MachineTol = SPACING(MAX(ABS(inner1), ABS(inner2)))
    relative_diff = ABS(inner1 - inner2) / MachineTol
    if (relative_diff < overall_tolerance) then
      WRITE(*, *) 'Test of adjoint of ''tl_project_eos_pressure_kernel_type'' PASSED: ', inner1, inner2, relative_diff
    else
      WRITE(*, *) 'Test of adjoint of ''tl_project_eos_pressure_kernel_type'' FAILED: ', inner1, inner2, relative_diff
    end if

  end subroutine adjoint_test

end module adjoint_test_mod
