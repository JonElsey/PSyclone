#!/bin/bash
# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2017-2020, Science and Technology Facilities Council.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Authors: R. W. Ford and A. R. Porter, STFC Daresbury Laboratory
# Modified: I. Kavcic, Met Office

# This is a simple bash script that executes all of the examples that
# are distributed with PSyclone. Note that PSyclone must be installed
# for this script to work (see ../README.md).
# TODO #713. Replace this script with a Makefile.

# abort if a command fails
set -e

# The location of the driver scripts for psyclone and the
# kernel-stub generator
export PSYCLONE=${PWD}/../bin/psyclone
export KSTUBGEN=${PWD}/../bin/genkernelstub

# Ensure we use the configuration file distributed with PSyclone and
# not a (potentially modified) local version.
export PSYCLONE_CONFIG=${PWD}/../config/psyclone.cfg
echo "Using the PSyclone configuration file: $PSYCLONE_CONFIG"

# ----------------------------------------------------------------- #
# Handle any command-line options. Currently we only support one.
# This code taken from https://stackoverflow.com/questions/192249/
# how-do-i-parse-command-line-arguments-in-bash
COMPILE=0

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -c|--compile)
    COMPILE=1
    shift # past argument
    ;;
# We could allow the user to specify which API to run the examples for
# but #713 (replace this script with a Makefile) would be better.
#    -a|--api)
#    API="$2"
#    shift # past argument
#    shift # past value
#    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ $COMPILE -eq 1 ]
then
    echo "Compilation enabled for those examples that support it."
else
    echo "No compilation will be performed."
fi

# ----------------------------------------------------------------- #
# Now we run the examples...

echo "Running examples psyir"
cd psyir
python create.py
cd -

echo "Running examples lfric/eg1"
cd lfric/eg1
python runme.py
python runme_openmp.py
cd -

echo "Running examples lfric/eg2"
cd lfric/eg2
python runme.py
python runme_openmp.py
python runme_loop_fuse.py
cd -

echo "Running example lfric/eg3"
cd lfric/eg3
${PSYCLONE} solver_mod.x90
${PSYCLONE} -s ./colouring_and_omp.py -nodm solver_mod.x90
cd -

echo "Running example lfric/eg4"
cd lfric/eg4
${PSYCLONE} -nodm solver_mod.x90
${PSYCLONE} solver_mod.x90
cd -

echo "Running example lfric/eg5"
cd lfric/eg5
${PSYCLONE} alg.f90
cd -

echo "Running example lfric/eg6"
cd lfric/eg6
${PSYCLONE} -nodm alg.x90
${PSYCLONE} alg.x90
${PSYCLONE} -nodm -s ./omp_script.py alg.x90
${PSYCLONE} -s ./omp_script.py alg.x90
${PSYCLONE} -s ./omp_reprod_script.py alg.x90
cd -

echo "Running example lfric/eg7"
cd lfric/eg7
${PSYCLONE} alg.x90
cd -

echo "Running example lfric/eg8"
cd lfric/eg8
${PSYCLONE} helmholtz_solver_alg_mod.x90
${PSYCLONE} -s ./redundant_script.py helmholtz_solver_alg_mod.x90
cd -

echo "Running example lfric/eg9"
cd lfric/eg9
${PSYCLONE} advective_inc_alg_mod.x90
${PSYCLONE} -s ./colouring_and_omp.py -nodm advective_inc_alg_mod.x90
cd -

echo "Running example lfric/eg10"
cd lfric/eg10
${PSYCLONE} intergrid_3levels.x90
cd -

echo "Running example lfric/eg11"
cd lfric/eg11
${PSYCLONE} -s ./async_script.py helmholtz_solver_alg_mod.x90
cd -

echo "Running example lfric/eg12"
cd lfric/eg12
${PSYCLONE} -nodm -s ./extract_nodes.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90
${PSYCLONE} -nodm -s ./extract_kernel_with_transformations.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90
python find_kernel.py
cd -

echo "Running example lfric/eg13"
cd lfric/eg13
${PSYCLONE} -s ./kernel_constants.py \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg alg.f90 -opsy psy.f90
rm *.f90
cd -

echo "Running example lfric/eg14"
cd lfric/eg14
${PSYCLONE} -s ./acc_kernels.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
${PSYCLONE} -s ./acc_parallel.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
${PSYCLONE} -s ./acc_parallel_dm.py -nodm \
  ../code/gw_mixed_schur_preconditioner_alg_mod.x90 \
  -oalg /dev/null
cd -

# ----------------------------------------------------------------- #

echo "Running gocean/eg1"
cd gocean/eg1
python runme.py
python runme_openmp.py
python runme_loop_fuse.py
python runme_dag.py
python runme_openacc.py
cd -

echo "Running gocean/eg2"
cd gocean/eg2
if [ $COMPILE -eq 1 ]
then
    # Only do the full compile if requested (because it requires a Fortran
    # compiler). The Makefiles default to using gfortran unless the F90
    # environment variable is set.
    cd ../../../external/dl_esm_inf/finite_difference
    make distclean
    cd -
    make allclean
    make
else
    # Otherwise, just run the PSyclone parts of the example
    ${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg.f90
    ${PSYCLONE} -api "gocean1.0" -s ./acc_prof_transform.py alg.f90
fi
cd ../..

echo "Running gocean/eg3"
cd gocean/eg3
${PSYCLONE} -api "gocean1.0" -s ./ocl_trans.py alg.f90
cd -

echo "Running gocean/eg4"
cd gocean/eg4
${PSYCLONE} -api "gocean1.0" alg_kern_use_var.f90
${PSYCLONE} -api "gocean1.0" -s ./ocl_transform.py alg_kern_use_var.f90
# The following currently fail as work is in progress to support
# transforming kernels that access data or routines from modules.
echo "TODO #490 and #342 and #663"
#${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg_kern_use_var.f90
#${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg_kern_call_kern.f90
#${PSYCLONE} -api "gocean1.0" -s ./acc_transform.py alg_kern_nested_use.f90
cd -

echo "Running gocean/eg5"
pushd gocean/eg5
make clean
if [ $COMPILE -eq 1 ]
then
    # Create the template profiling library
    pushd ../../../lib/profiling/template
        make clean
        make
    popd
    make template
    # This will create one binary using the template library
    # Run the binary:
    ./profile_test.template
else
    # Only trigger one psyclone invocation.
    make alg.f90
fi
popd


echo "Running gocean/eg6"
cd gocean/eg6
${PSYCLONE} -nodm -l -api "gocean1.0"             \
            --config ../../../config/psyclone.cfg \
            -s ./extract_transform.py             \
            -opsy psy.f90 -oalg alg.f90 test.x90

cd -

# ----------------------------------------------------------------- #

echo "Running example nemo/eg1"
cd nemo/eg1
./runme_openmp.py
cd -
echo "Running example nemo/eg2"
cd nemo/eg2
./runme_openmp.py
${PSYCLONE} -api "nemo" -s ./omp_levels_trans.py ../code/traldf_iso.F90
cd -
echo "Running example nemo/eg3"
cd nemo/eg3
${PSYCLONE} -api "nemo" -s ./kernels_trans.py ../code/tra_adv.F90
${PSYCLONE} -api "nemo" -s ./kernels_managed_mem_trans.py ../code/tra_adv.F90
cd -
echo "Running example nemo/eg4"
cd nemo/eg4
# As part of #714 (support for ranges and expressions in array-shape
# declarations), the two files named below should be included back
# in the list over files.
echo "TODO #714 skipping copy_stencil.f90 and hori_diff.f90"
for file in "tridiagonal_solve.f90" \
		"if_example.f90"; do
    echo "file" ${file} "..."
    ${PSYCLONE} -api "nemo" -s ./sir_trans.py ${file} -opsy /dev/null
done
cd -

# ----------------------------------------------------------------- #

echo "Running transformation examples"
cd transformations/inline
python module_inline_example.py
cd -

echo "Running line-length examples"
cd line_length
python runme.py
cd -

echo "Running stub generation examples"
cd stub_generation
${KSTUBGEN} testkern_stencil_multi_mod.f90
cd -

echo "Testing lfric scripts"
cd lfric/scripts
for script in "colouring_and_omp.py" \
		  "loop_fuse.py" \
		  "redundant_dofs.py" \
		  "redundant_setval_c.py" \
		  "kernel_print.py"; do
    echo "script" ${script} "..."
    ${PSYCLONE} -s ./${script} ../eg3/solver_mod.x90 -oalg /dev/null -opsy /dev/null
done
cd -
